-- MySQL Script generated by MySQL Workbench
-- петак, 28. децембар 2018. 03:00:29 CET
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema veleprodaja
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `veleprodaja` ;

-- -----------------------------------------------------
-- Schema veleprodaja
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `veleprodaja` DEFAULT CHARACTER SET utf8 ;
USE `veleprodaja` ;

-- -----------------------------------------------------
-- Table `veleprodaja`.`Zaposleni`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `veleprodaja`.`Zaposleni` ;

CREATE TABLE IF NOT EXISTS `veleprodaja`.`Zaposleni` (
  `idZaposleni` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `ImePrezime` VARCHAR(45) NULL,
  `DatumZaposlenja` DATE NULL,
  `StručnaSprema` VARCHAR(45) NULL,
  `Funkcija` VARCHAR(45) NULL,
  `UgovorenaPlata` VARCHAR(45) NULL,
  `KorisnickoIme` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idZaposleni`, `KorisnickoIme`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `veleprodaja`.`Kupac`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `veleprodaja`.`Kupac` ;

CREATE TABLE IF NOT EXISTS `veleprodaja`.`Kupac` (
  `idKupac` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `PIB` INT NULL,
  `NazivFirme` VARCHAR(45) NULL,
  `TekućiRačun` VARCHAR(45) NULL,
  PRIMARY KEY (`idKupac`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `veleprodaja`.`Kontakt_osoba`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `veleprodaja`.`Kontakt_osoba` ;

CREATE TABLE IF NOT EXISTS `veleprodaja`.`Kontakt_osoba` (
  `idKontOsobe` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Kupac_idKupac` INT UNSIGNED NOT NULL,
  `ImePrezime` INT NULL,
  `Telefon` VARCHAR(45) NULL,
  PRIMARY KEY (`idKontOsobe`, `Kupac_idKupac`),
  CONSTRAINT `fk_Kontakt osoba_Kupac`
    FOREIGN KEY (`Kupac_idKupac`)
    REFERENCES `veleprodaja`.`Kupac` (`idKupac`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `veleprodaja`.`Dokument`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `veleprodaja`.`Dokument` ;

CREATE TABLE IF NOT EXISTS `veleprodaja`.`Dokument` (
  `idDokument` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `VremeKreiranja` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `VremeIzmene` DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `IzmenaKorisnik` VARCHAR(45) NULL,
  `Status` VARCHAR(45) NULL,
  PRIMARY KEY (`idDokument`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `veleprodaja`.`Porudzbina`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `veleprodaja`.`Porudzbina` ;

CREATE TABLE IF NOT EXISTS `veleprodaja`.`Porudzbina` (
  `idPorudzbina` INT UNSIGNED NOT NULL,
  `Kupac_idKupac` INT UNSIGNED NOT NULL,
  `DatumPorudzbine` DATE NULL,
  INDEX `fk_Zaposleni_has_Kupac_Kupac1_idx` (`Kupac_idKupac` ASC),
  PRIMARY KEY (`idPorudzbina`),
  CONSTRAINT `fk_Zaposleni_has_Kupac_Kupac1`
    FOREIGN KEY (`Kupac_idKupac`)
    REFERENCES `veleprodaja`.`Kupac` (`idKupac`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Porudžbina_1`
    FOREIGN KEY (`idPorudzbina`)
    REFERENCES `veleprodaja`.`Dokument` (`idDokument`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `veleprodaja`.`Proizvod`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `veleprodaja`.`Proizvod` ;

CREATE TABLE IF NOT EXISTS `veleprodaja`.`Proizvod` (
  `idProizvodi` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Naziv` VARCHAR(45) NULL,
  `Cena` DECIMAL NULL,
  PRIMARY KEY (`idProizvodi`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `veleprodaja`.`Stavka`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `veleprodaja`.`Stavka` ;

CREATE TABLE IF NOT EXISTS `veleprodaja`.`Stavka` (
  `idDokumenta` INT UNSIGNED NOT NULL,
  `Proizvodi_idProizvodi` INT UNSIGNED NOT NULL,
  `Kolicina` INT NULL,
  `Cena` DECIMAL NULL,
  PRIMARY KEY (`idDokumenta`, `Proizvodi_idProizvodi`),
  INDEX `fk_Stavke_Proizvodi1_idx` (`Proizvodi_idProizvodi` ASC),
  CONSTRAINT `fk_Stavke_Proizvodi1`
    FOREIGN KEY (`Proizvodi_idProizvodi`)
    REFERENCES `veleprodaja`.`Proizvod` (`idProizvodi`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Dokument`
    FOREIGN KEY (`idDokumenta`)
    REFERENCES `veleprodaja`.`Dokument` (`idDokument`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `veleprodaja`.`Proizvod_has_Proizvod`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `veleprodaja`.`Proizvod_has_Proizvod` ;

CREATE TABLE IF NOT EXISTS `veleprodaja`.`Proizvod_has_Proizvod` (
  `Proizvod_idProizvodi` INT UNSIGNED NOT NULL,
  `Proizvod_idProizvodi1` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`Proizvod_idProizvodi`, `Proizvod_idProizvodi1`),
  INDEX `fk_Proizvod_has_Proizvod_Proizvod2_idx` (`Proizvod_idProizvodi1` ASC),
  INDEX `fk_Proizvod_has_Proizvod_Proizvod1_idx` (`Proizvod_idProizvodi` ASC),
  CONSTRAINT `fk_Proizvod_has_Proizvod_Proizvod1`
    FOREIGN KEY (`Proizvod_idProizvodi`)
    REFERENCES `veleprodaja`.`Proizvod` (`idProizvodi`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Proizvod_has_Proizvod_Proizvod2`
    FOREIGN KEY (`Proizvod_idProizvodi1`)
    REFERENCES `veleprodaja`.`Proizvod` (`idProizvodi`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `veleprodaja`.`Ponuda`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `veleprodaja`.`Ponuda` ;

CREATE TABLE IF NOT EXISTS `veleprodaja`.`Ponuda` (
  `idPonuda` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Porudzbina_idPorudzbina` INT UNSIGNED NOT NULL,
  `DatumPonude` DATE NULL,
  `Kontinuitet_broj_isporuka` VARCHAR(45) NULL,
  `Nacin_isporuke` VARCHAR(45) NULL,
  `Rok_placanja` DATE NULL,
  `Cena` DECIMAL NULL,
  `Popust` DECIMAL NULL,
  `Prodajna_cena` DECIMAL NULL,
  PRIMARY KEY (`idPonuda`),
  INDEX `fk_Ponuda_Porudžbina1_idx` (`Porudzbina_idPorudzbina` ASC),
  CONSTRAINT `fk_Ponuda_Porudžbina1`
    FOREIGN KEY (`Porudzbina_idPorudzbina`)
    REFERENCES `veleprodaja`.`Porudzbina` (`idPorudzbina`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Ponuda_1`
    FOREIGN KEY (`idPonuda`)
    REFERENCES `veleprodaja`.`Dokument` (`idDokument`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `veleprodaja`.`Otpremnica`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `veleprodaja`.`Otpremnica` ;

CREATE TABLE IF NOT EXISTS `veleprodaja`.`Otpremnica` (
  `idOtpremnica` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `idMagacina` VARCHAR(45) NULL,
  `Ponuda_idPonuda` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`idOtpremnica`),
  INDEX `fk_Otpremnica_Ponuda1_idx` (`Ponuda_idPonuda` ASC),
  CONSTRAINT `fk_Otpremnica_Ponuda1`
    FOREIGN KEY (`Ponuda_idPonuda`)
    REFERENCES `veleprodaja`.`Ponuda` (`idPonuda`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Otpremnica_1`
    FOREIGN KEY (`idOtpremnica`)
    REFERENCES `veleprodaja`.`Dokument` (`idDokument`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `veleprodaja`.`Faktura`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `veleprodaja`.`Faktura` ;

CREATE TABLE IF NOT EXISTS `veleprodaja`.`Faktura` (
  `idFaktura` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Otpremnica_idOtpremnica` INT UNSIGNED NOT NULL,
  `Rok isporuke` DATE NULL,
  PRIMARY KEY (`idFaktura`),
  INDEX `fk_Faktura_Otpremnica1_idx` (`Otpremnica_idOtpremnica` ASC),
  CONSTRAINT `fk_Faktura_Otpremnica1`
    FOREIGN KEY (`Otpremnica_idOtpremnica`)
    REFERENCES `veleprodaja`.`Otpremnica` (`idOtpremnica`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Faktura_1`
    FOREIGN KEY (`idFaktura`)
    REFERENCES `veleprodaja`.`Dokument` (`idDokument`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `veleprodaja`.`Izradjuje`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `veleprodaja`.`Izradjuje` ;

CREATE TABLE IF NOT EXISTS `veleprodaja`.`Izradjuje` (
  `Dokument_idDokument` INT UNSIGNED NOT NULL,
  `Zaposleni_idZaposleni` INT UNSIGNED NOT NULL,
  `Zaposleni_KorisnickoIme` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Dokument_idDokument`, `Zaposleni_idZaposleni`, `Zaposleni_KorisnickoIme`),
  INDEX `fk_Zaposleni_has_Dokument_Dokument1_idx` (`Dokument_idDokument` ASC),
  INDEX `fk_Zaposleni_has_Dokument_Zaposleni1_idx` (`Zaposleni_idZaposleni` ASC, `Zaposleni_KorisnickoIme` ASC),
  CONSTRAINT `fk_Zaposleni_has_Dokument_Zaposleni1`
    FOREIGN KEY (`Zaposleni_idZaposleni` , `Zaposleni_KorisnickoIme`)
    REFERENCES `veleprodaja`.`Zaposleni` (`idZaposleni` , `KorisnickoIme`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Zaposleni_has_Dokument_Dokument1`
    FOREIGN KEY (`Dokument_idDokument`)
    REFERENCES `veleprodaja`.`Dokument` (`idDokument`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

DROP TRIGGER IF EXISTS insPor;
DELIMITER $$
CREATE TRIGGER insPor BEFORE INSERT ON Porudzbina
  FOR EACH ROW
    begin

    -- uzimo dostupan id iz tabele dokument
    SET NEW.idPorudzbina = (SELECT `AUTO_INCREMENT` FROM  INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'veleprodaja' AND   TABLE_NAME   = 'Dokument');

    -- kreiramo odgovarajucu torku u dokumentu
    INSERT INTO Dokument(VremeKreiranja,VremeIzmene,IzmenaKorisnik,Status)
    VALUES (current_timestamp,current_timestamp,USER(),'radni');
    
    -- unosi podatke o useru koji je ubacio porudzbinu
    INSERT INTO Izradjuje VALUES (NEW.idPorudzbina,(SELECT idZaposleni from Zaposleni WHERE KorisnickoIme = USER()),USER());
    
    end$$
    
DELIMITER ;

DROP TRIGGER IF EXISTS insPon;
DELIMITER $$
CREATE TRIGGER insPon BEFORE INSERT ON Ponuda
  FOR EACH ROW
    begin

    SET NEW.idPonuda = (SELECT `AUTO_INCREMENT` FROM  INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'veleprodaja' AND   TABLE_NAME   = 'Dokument');
    
    INSERT INTO Dokument(VremeKreiranja,VremeIzmene,IzmenaKorisnik,Status)
    VALUES (current_timestamp,current_timestamp,USER(),'radni');

    
    INSERT INTO Izradjuje VALUES (NEW.idPonuda,(SELECT idZaposleni from Zaposleni WHERE KorisnickoIme = USER()),USER());
    
    end$$
    
DELIMITER ;

DROP TRIGGER IF EXISTS insOtp;
DELIMITER $$
CREATE TRIGGER insOtp BEFORE INSERT ON Otpremnica
  FOR EACH ROW
    begin

    SET NEW.idOtpremnica = (SELECT `AUTO_INCREMENT` FROM  INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'veleprodaja' AND   TABLE_NAME   = 'Dokument');
    
    INSERT INTO Dokument(VremeKreiranja,VremeIzmene,IzmenaKorisnik,Status)
    VALUES (current_timestamp,current_timestamp,USER(),'radni');
    
    INSERT INTO Izradjuje VALUES (NEW.idOtpremnica,(SELECT idZaposleni from Zaposleni WHERE KorisnickoIme = USER()),USER());
    
    end$$
    
DELIMITER ;

DROP TRIGGER IF EXISTS insFak;
DELIMITER $$
CREATE TRIGGER insFak BEFORE INSERT ON Faktura
  FOR EACH ROW
    begin

    SET NEW.idFaktura = (SELECT `AUTO_INCREMENT` FROM  INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'veleprodaja' AND   TABLE_NAME   = 'Dokument');
    
    INSERT INTO Dokument(VremeKreiranja,VremeIzmene,IzmenaKorisnik,Status)
    VALUES (current_timestamp,current_timestamp,USER(),'radni');
    
    INSERT INTO Izradjuje VALUES (NEW.idFaktura,(SELECT idZaposleni from Zaposleni WHERE KorisnickoIme = USER()),USER());
    
    end$$
    
DELIMITER ;

DROP TRIGGER IF EXISTS updPor;
DELIMITER $$
CREATE TRIGGER updPor BEFORE UPDATE ON Porudzbina
  FOR EACH ROW
    begin

    -- ako se update porudzbina update i dokument
    UPDATE Dokument SET VremeIzmene = current_timestamp, IzmenaKorisnik = USER() WHERE NEW.idPorudzbina = idDokument;
    
    -- evidentiramo ako je neki drugi user vrsio izmene
    INSERT IGNORE INTO Izradjuje VALUES (NEW.idPorudzbina,(SELECT idZaposleni from Zaposleni WHERE KorisnickoIme = USER()),USER());
    
    end$$
    
DELIMITER ;

DROP TRIGGER IF EXISTS updPon;
DELIMITER $$
CREATE TRIGGER updPon BEFORE UPDATE ON Ponuda
  FOR EACH ROW
    begin

    UPDATE Dokument SET VremeIzmene = current_timestamp, IzmenaKorisnik = USER() WHERE NEW.idPonuda = idDokument;
    
    INSERT IGNORE INTO Izradjuje VALUES (NEW.idPonuda,(SELECT idZaposleni from Zaposleni WHERE KorisnickoIme = USER()),USER());
    
    end$$
    
DELIMITER ;
 
DROP TRIGGER IF EXISTS updOtp;
DELIMITER $$
CREATE TRIGGER updOtp BEFORE UPDATE ON Otpremnica
  FOR EACH ROW
    begin

    UPDATE Dokument SET VremeIzmene = current_timestamp, IzmenaKorisnik = USER() WHERE NEW.idOtpremnica = idDokument;
    
    INSERT IGNORE INTO Izradjuje VALUES (NEW.idOtpremnica,(SELECT idZaposleni from Zaposleni WHERE KorisnickoIme = USER()),USER());
    
    end$$
    
DELIMITER ;

DROP TRIGGER IF EXISTS updFak;
DELIMITER $$
CREATE TRIGGER updFak BEFORE UPDATE ON Faktura
  FOR EACH ROW
    begin

    UPDATE Dokument SET VremeIzmene = current_timestamp, IzmenaKorisnik = USER() WHERE NEW.idFaktura = idDokument;
    
    INSERT IGNORE INTO Izradjuje VALUES (NEW.idFaktura,(SELECT idZaposleni from Zaposleni WHERE KorisnickoIme = USER()),USER());
    
    end$$
    
DELIMITER ;

DROP TRIGGER IF EXISTS insStavka;
DELIMITER $$
CREATE TRIGGER insStavka BEFORE INSERT ON Stavka
  FOR EACH ROW
    begin
    
    -- cena stavke na osnovu kolicine i cene proizvoda
    SET NEW.Cena = NEW.Kolicina * (SELECT Cena FROM Proizvod WHERE Proizvod.idProizvodi = NEW.Proizvodi_idProizvodi);
    
    end$$
    
DELIMITER ;

DROP TRIGGER IF EXISTS updStavka;
DELIMITER $$
CREATE TRIGGER updStavka BEFORE UPDATE ON Stavka
  FOR EACH ROW
    begin
    
    SET NEW.Cena = NEW.Kolicina * (SELECT Cena FROM Proizvod WHERE Proizvod.idProizvodi = NEW.Proizvodi_idProizvodi);
    
    end$$
    
DELIMITER ;

DROP TRIGGER IF EXISTS insAftStavka;
DELIMITER $$
CREATE TRIGGER insAftStavka AFTER INSERT ON Stavka
  FOR EACH ROW
    begin
    
    -- cena ponuda je zbir cena stavki u toj ponudi
    UPDATE Ponuda SET Cena = (SELECT SUM(Cena) from Stavka WHERE Stavka.idDokumenta = idPonuda)
    WHERE idPonuda = NEW.idDokumenta;
    
    -- racuna se i prodajna cena, u koju se ukljucuje eventualni popust
    UPDATE Ponuda SET Prodajna_cena = Ponuda.Cena - (Ponuda.Popust * 0.01 ) * Ponuda.Cena
    WHERE idPonuda = NEW.idDokumenta;
    
    end$$
    
DELIMITER ;

DROP TRIGGER IF EXISTS updAftStavka;
DELIMITER $$
CREATE TRIGGER updAftStavka AFTER UPDATE ON Stavka
  FOR EACH ROW
    begin
    
    UPDATE Ponuda SET Cena = (SELECT SUM(Cena) FROM Stavka WHERE Stavka.idDokumenta = idPonuda)
    WHERE idPonuda = NEW.idDokumenta;
    
    UPDATE Ponuda SET Prodajna_cena = Ponuda.Cena - (Ponuda.Popust * 0.01 ) * Ponuda.Cena
    WHERE idPonuda = NEW.idDokumenta;
    
    end$$
    
DELIMITER ;

DROP TRIGGER IF EXISTS updAftPonuda;
DELIMITER $$
CREATE TRIGGER updAftPonuda BEFORE UPDATE ON Ponuda
  FOR EACH ROW
    begin
    
    -- u slucaju ako update popust recimo
    SET NEW.Prodajna_cena = NEW.Cena - (NEW.Popust * 0.01 ) * NEW.Cena;
    
    end$$
    
DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
